#!/usr/bin/env node

/**
 * Â∞èÊô∫MCPÊ°•Êé•ÊúçÂä°ÊºîÁ§∫ËÑöÊú¨
 * 
 * Ê≠§ËÑöÊú¨ÊºîÁ§∫Â¶Ç‰ΩïÈÖçÁΩÆÂíåÂêØÂä®Â∞èÊô∫MCPÊ°•Êé•ÊúçÂä°
 * Ê≥®ÊÑèÔºöÈúÄË¶ÅÊúâÊïàÁöÑÂ∞èÊô∫ËÆøÈóÆ‰ª§ÁâåÊâçËÉΩÊ≠£Â∏∏ËøûÊé•
 */

import { XiaozhiMCPBridge } from './src/xiaozhi-bridge.js';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ÊºîÁ§∫ÈÖçÁΩÆÔºà‰ΩøÁî®ÊµãËØïÁ´ØÁÇπÔºâ
const demoConfig = {
  name: "ÊàêËØ≠Êé•ÈæôMCPÊúçÂä°ÊºîÁ§∫",
  description: "ÊºîÁ§∫Â∞èÊô∫MCPÊ°•Êé•ÂäüËÉΩ",
  version: "1.0.0",
  mcpServers: {
    "idiom-chain-mcp": {
      command: "node",
      args: ["src/index.js"],
      cwd: __dirname,
      env: {
        NODE_ENV: "demo"
      },
      transport: "stdio",
      description: "ÊàêËØ≠Êé•ÈæôMCPÊúçÂä°Âô®",
      tools: [
        "start_game",
        "add_idiom", 
        "get_hints",
        "get_game_state",
        "auto_play",
        "reset_game",
        "validate_idiom",
        "get_random_idiom",
        "get_stats",
        "start_sse_server",
        "get_sse_info"
      ]
    }
  },
  xiaozhi: {
    endpoint: "ws://localhost:9999/demo", // ÊºîÁ§∫Áî®Á´ØÁÇπ
    reconnect: {
      enabled: true,
      maxRetries: 3,
      backoffMs: 1000
    },
    features: {
      mcp: true,
      realtime: true
    }
  },
  bridge: {
    port: 8080,
    host: "localhost",
    cors: {
      enabled: true,
      origins: ["*"]
    },
    logging: {
      level: "info",
      file: "xiaozhi-bridge-demo.log"
    }
  }
};

// Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂
function checkConfiguration() {
  const configPath = path.join(__dirname, 'xiaozhi-config.json');
  
  console.log('üîç Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂...');
  
  if (!fs.existsSync(configPath)) {
    console.log('‚ùå ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåÂ∞ÜÂàõÂª∫ÊºîÁ§∫ÈÖçÁΩÆ');
    return null;
  }
  
  try {
    const configData = fs.readFileSync(configPath, 'utf8');
    const config = JSON.parse(configData);
    
    if (config.xiaozhi.endpoint.includes('YOUR_XIAOZHI_TOKEN_HERE')) {
      console.log('‚ö†Ô∏è  ÈÖçÁΩÆÊñá‰ª∂‰∏≠ÂåÖÂê´Âç†‰ΩçÁ¨¶‰ª§ÁâåÔºåÂ∞Ü‰ΩøÁî®ÊºîÁ§∫ÈÖçÁΩÆ');
      return null;
    }
    
    console.log('‚úÖ ÊâæÂà∞ÊúâÊïàÈÖçÁΩÆÊñá‰ª∂');
    return config;
    
  } catch (error) {
    console.log('‚ùå ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈîôËØØÔºåÂ∞Ü‰ΩøÁî®ÊºîÁ§∫ÈÖçÁΩÆ');
    return null;
  }
}

// ÊºîÁ§∫MCPÊúçÂä°Âô®ÂêØÂä®
async function demonstrateMCPServer() {
  console.log('\nüöÄ ÊºîÁ§∫MCPÊúçÂä°Âô®ÂäüËÉΩ...');
  
  const config = checkConfiguration() || demoConfig;
  const bridge = new XiaozhiMCPBridge(config);
  
  try {
    // Âè™ÂêØÂä®MCPÊúçÂä°Âô®ÈÉ®ÂàÜ
    console.log('üì¶ ÂêØÂä®ÊàêËØ≠Êé•ÈæôMCPÊúçÂä°Âô®...');
    await bridge.startMCPServer();
    
    console.log('‚úÖ MCPÊúçÂä°Âô®ÂêØÂä®ÊàêÂäüÔºÅ');
    console.log('üìã ÂèØÁî®Â∑•ÂÖ∑:', config.mcpServers['idiom-chain-mcp'].tools.join(', '));
    
    // ÊºîÁ§∫‰∏Ä‰∫õMCPÊ∂àÊÅØ
    console.log('\nüì® ÊºîÁ§∫MCPÊ∂àÊÅØ‰∫§‰∫í...');
    
    // Ê®°ÊãüÂ∑•ÂÖ∑ÂàóË°®ËØ∑Ê±Ç
    const listToolsMessage = {
      jsonrpc: '2.0',
      id: 1,
      method: 'tools/list'
    };
    
    console.log('ÂèëÈÄÅÂ∑•ÂÖ∑ÂàóË°®ËØ∑Ê±Ç:', JSON.stringify(listToolsMessage, null, 2));
    
    // Á≠âÂæÖ‰∏ÄÊÆµÊó∂Èó¥ËÆ©Áî®Êà∑ÁúãÂà∞ËæìÂá∫
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    console.log('\nüõë ÊºîÁ§∫ÂÆåÊàêÔºåÂÖ≥Èó≠MCPÊúçÂä°Âô®...');
    await bridge.stop();
    
  } catch (error) {
    console.error('‚ùå ÊºîÁ§∫ËøáÁ®ã‰∏≠Âá∫Èîô:', error.message);
    await bridge.stop();
  }
}

// ÊòæÁ§∫ÈÖçÁΩÆÊåáÂçó
function showConfigurationGuide() {
  console.log('\nüìñ Â∞èÊô∫Êé•ÂÖ•ÈÖçÁΩÆÊåáÂçó:');
  console.log('\n1. Ëé∑ÂèñÂ∞èÊô∫ËÆøÈóÆ‰ª§Áâå:');
  console.log('   - ËÆøÈóÆÂ∞èÊô∫ÂÆòÁΩëÁî≥ËØ∑MCPÊé•ÂÖ•ÊùÉÈôê');
  console.log('   - Ëé∑ÂèñWebSocketÊé•ÂÖ•ÁÇπÂú∞ÂùÄÂíåËÆøÈóÆ‰ª§Áâå');
  
  console.log('\n2. ÁºñËæëÈÖçÁΩÆÊñá‰ª∂ xiaozhi-config.json:');
  console.log('   - Â∞Ü YOUR_XIAOZHI_TOKEN_HERE ÊõøÊç¢‰∏∫ÂÆûÈôÖ‰ª§Áâå');
  console.log('   - Á°ÆËÆ§Êé•ÂÖ•ÁÇπÂú∞ÂùÄÊ≠£Á°Æ');
  
  console.log('\n3. ÂêØÂä®Ê°•Êé•ÊúçÂä°:');
  console.log('   npm run xiaozhi-bridge');
  
  console.log('\n4. Âú®Â∞èÊô∫‰∏≠‰ΩøÁî®ÊàêËØ≠Êé•ÈæôÂäüËÉΩ:');
  console.log('   - "ÂºÄÂßã‰∏Ä‰∏™ÊàêËØ≠Êé•ÈæôÊ∏∏Êàè"');
  console.log('   - "ÊàëÊé•[ÊàêËØ≠]"');
  console.log('   - "ÁªôÊàë‰∏Ä‰∫õÊèêÁ§∫"');
  console.log('   - "Êü•ÁúãÊ∏∏ÊàèÁä∂ÊÄÅ"');
  
  console.log('\nüìö ËØ¶ÁªÜÊñáÊ°£: XIAOZHI_INTEGRATION.md');
}

// ÊòæÁ§∫Áä∂ÊÄÅ‰ø°ÊÅØ
function showStatus() {
  console.log('\nüìä ÂΩìÂâçÁä∂ÊÄÅ:');
  
  const configPath = path.join(__dirname, 'xiaozhi-config.json');
  const hasConfig = fs.existsSync(configPath);
  
  console.log(`ÈÖçÁΩÆÊñá‰ª∂: ${hasConfig ? '‚úÖ Â≠òÂú®' : '‚ùå ‰∏çÂ≠òÂú®'}`);
  
  if (hasConfig) {
    try {
      const configData = fs.readFileSync(configPath, 'utf8');
      const config = JSON.parse(configData);
      const hasValidToken = !config.xiaozhi.endpoint.includes('YOUR_XIAOZHI_TOKEN_HERE');
      
      console.log(`ËÆøÈóÆ‰ª§Áâå: ${hasValidToken ? '‚úÖ Â∑≤ÈÖçÁΩÆ' : '‚ö†Ô∏è  ÈúÄË¶ÅÈÖçÁΩÆ'}`);
      console.log(`Êé•ÂÖ•ÁÇπ: ${config.xiaozhi.endpoint}`);
      
    } catch (error) {
      console.log('ÈÖçÁΩÆÊ†ºÂºè: ‚ùå Ê†ºÂºèÈîôËØØ');
    }
  }
  
  // Ê£ÄÊü•‰æùËµñ
  const packagePath = path.join(__dirname, 'package.json');
  if (fs.existsSync(packagePath)) {
    try {
      const packageData = fs.readFileSync(packagePath, 'utf8');
      const packageJson = JSON.parse(packageData);
      const hasWs = packageJson.dependencies && packageJson.dependencies.ws;
      
      console.log(`WebSocket‰æùËµñ: ${hasWs ? '‚úÖ Â∑≤ÂÆâË£Ö' : '‚ùå Êú™ÂÆâË£Ö'}`);
      
    } catch (error) {
      console.log('‰æùËµñÊ£ÄÊü•: ‚ùå Ê£ÄÊü•Â§±Ë¥•');
    }
  }
}

// ‰∏ªÂáΩÊï∞
async function main() {
  console.log('üåâ Â∞èÊô∫MCPÊ°•Êé•ÊúçÂä°ÊºîÁ§∫');
  console.log('================================\n');
  
  const args = process.argv.slice(2);
  const command = args[0] || 'demo';
  
  switch (command) {
    case 'demo':
      await demonstrateMCPServer();
      break;
      
    case 'config':
      showConfigurationGuide();
      break;
      
    case 'status':
      showStatus();
      break;
      
    case 'help':
      console.log('ÂèØÁî®ÂëΩ‰ª§:');
      console.log('  demo   - ÊºîÁ§∫MCPÊúçÂä°Âô®ÂäüËÉΩÔºàÈªòËÆ§Ôºâ');
      console.log('  config - ÊòæÁ§∫ÈÖçÁΩÆÊåáÂçó');
      console.log('  status - ÊòæÁ§∫ÂΩìÂâçÁä∂ÊÄÅ');
      console.log('  help   - ÊòæÁ§∫Ê≠§Â∏ÆÂä©‰ø°ÊÅØ');
      break;
      
    default:
      console.log(`‚ùå Êú™Áü•ÂëΩ‰ª§: ${command}`);
      console.log('‰ΩøÁî® "help" Êü•ÁúãÂèØÁî®ÂëΩ‰ª§');
      break;
  }
  
  console.log('\nÊºîÁ§∫ÁªìÊùü„ÄÇ');
}

// ÈîôËØØÂ§ÑÁêÜ
process.on('uncaughtException', (error) => {
  console.error('‚ùå Êú™ÊçïËé∑ÁöÑÂºÇÂ∏∏:', error.message);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Êú™Â§ÑÁêÜÁöÑPromiseÊãíÁªù:', reason);
  process.exit(1);
});

// ËøêË°å‰∏ªÂáΩÊï∞
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch(error => {
    console.error('‚ùå ÊºîÁ§∫Â§±Ë¥•:', error.message);
    process.exit(1);
  });
}

export { demoConfig, demonstrateMCPServer };